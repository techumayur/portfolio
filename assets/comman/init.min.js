// Header Scroll
let nav = document.querySelector(".navbar");
window.onscroll = function () {
	if (document.documentElement.scrollTop > 20) {
		nav.classList.add("header-scrolled");
	} else {
		nav.classList.remove("header-scrolled");
	}
};

jQuery(function ($) {
	$(".navbar .dropdown").hover(
		function () {
			$(this)
				.find(".dropdown-menu")
				.first()
				.stop(true, true)
				.delay(250)
				.slideDown();
		},
		function () {
			$(this)
				.find(".dropdown-menu")
				.first()
				.stop(true, true)
				.delay(100)
				.slideUp();
		}
	);

	$(".navbar .dropdown > a").click(function () {
		location.href = this.href;
	});
});

// nav hide
let navBar = document.querySelectorAll(".nav-link");
let navCollapse = document.querySelector(".navbar-collapse.collapse");
navBar.forEach(function (a) {
	a.addEventListener("click", function () {
		navCollapse.classList.remove("show");
	});
});

//Back to top

$(document).ready(function () {
	$(window).scroll(function () {
		if ($(this).scrollTop() > 100) {
			$("#scroll").fadeIn();
		} else {
			$("#scroll").fadeOut();
		}
	});
	$("#scroll").click(function () {
		$("html, body").animate({ scrollTop: 0 }, 600);
		return false;
	});
});

// Home Page Banner
$(".home-banner-slider").slick({
	dots: true,
	arrows: false,
	infinite: true,
	// autoplay: true,
	speed: 1000,
	slidesToShow: 1,
	slidesToScroll: 1,
});

//Animations
AOS.init();

//Home Banner Typing animation
const TypeWriter = function (txtElement, words, wait = 3000) {
	this.txtElement = txtElement;
	this.words = words;
	this.txt = "";
	//index of the the current string being typedout
	this.wordIndex = 0;
	//this.wait must be a base 10 interger
	this.wait = parseInt(wait, 10);
	//method type()
	this.type();
	// Boolean if the word is currently deleting
	this.isDeleting = false;
};

// type method from constructor function
TypeWriter.prototype.type = function () {
	//current index of words
	const current = this.wordIndex % this.words.length;
	//get full text of current word
	const fullTxt = this.words[current];

	// check if deleting
	if (this.isDeleting) {
		//remove character
		this.txt = fullTxt.substring(0, this.txt.length - 1);
	} else {
		//add a charaacter
		this.txt = fullTxt.substring(0, this.txt.length + 1);
	}

	// insert txt into element
	this.txtElement.innerHTML = `<span class="txt text-highlight">${this.txt}</span>`;

	//type speed for when it is typing, deleting and pausing after deletion

	let typeSpeed = 300;

	//select pencil icon for writting animation
	const typingElement = document.querySelector(".fas-home");

	if (this.isDeleting) {
		typeSpeed /= 4;
	}

	if (this.isDeleting) {
		typingElement.className = "fas fas-home fa-pencil-alt erasing-animation";
	} else {
		typingElement.className = "fas fas-home fa-pencil-alt writing-animation";
	}

	// if word is complete
	if (!this.isDeleting && this.txt === fullTxt) {
		// make pause at end
		typeSpeed = this.wait;
		//set delete to true
		this.isDeleting = true;
		//will stop the pencil animation after word completion
		typingElement.className = "fas fas-home fa-pencil-alt";
	} else if (this.isDeleting && this.txt === "") {
		this.isDeleting = false;
		//move to the next word in the HTML property
		this.wordIndex++;
		// Pause before start typing
		typeSpeed = 1000;
	}

	setTimeout(() => this.type(), typeSpeed);
};

//Init On DOM Load
document.addEventListener("DOMContentLoaded", init);

//Init App
function init() {
	const txtElement = document.querySelector(".txt-type");
	const words = JSON.parse(txtElement.getAttribute("data-words"));
	const wait = txtElement.getAttribute("data-wait");

	new TypeWriter(txtElement, words, wait);
}

//Portfolio Clients Slider

$(".portfolio-client-slider").slick({
	dots: true,
	arrows: true,
	infinite: false,
	prevArrow: $(".portfolio-client-slider-prev"),
	nextArrow: $(".portfolio-client-slider-next"),
	speed: 300,
	slidesToShow: 4,
	slidesToScroll: 4,
	responsive: [
		{
			breakpoint: 1024,
			settings: {
				slidesToShow: 3,
				slidesToScroll: 3,
			},
		},
		{
			breakpoint: 600,
			settings: {
				slidesToShow: 2,
				slidesToScroll: 2,
			},
		},
		{
			breakpoint: 480,
			settings: {
				slidesToShow: 1,
				slidesToScroll: 1,
			},
		},
		// You can unslick at a given breakpoint now by adding:
		// settings: "unslick"
		// instead of a settings object
	],
});
